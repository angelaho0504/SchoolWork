Test date: 06/25/19  23:29:52 
The number of times you used the grading program is 3 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
TABS Grading System Version 4.0
Student: Last=Ho                   First=Angela               Type=Individual          
Grading and testing history log
       User Test.    Date: 06/25/19  15:31:37  tabin.1      testout      
       User Test.    Date: 06/25/19  15:42:35  tabin.1      testout      
       User Test.    Date: 06/25/19  16:00:36  tabin.1      testout      
       User Test.    Date: 06/25/19  16:02:39  tabin.1      testout      
       User Test.    Date: 06/25/19  16:02:53  tabin.1      testout      
       User Test.    Date: 06/25/19  16:42:06  tabin.1      testout      
       User Test.    Date: 06/25/19  20:24:14  tabin.1      testout      
       User Test.    Date: 06/25/19  20:37:19  tabin.1      testout      
       User Test.    Date: 06/25/19  20:43:22  tabin.1      testout      
       User Test.    Date: 06/25/19  21:48:09  tabin.1      testout      
       User Test.    Date: 06/25/19  22:13:45  tabin.1      testout      
       User Test.    Date: 06/25/19  22:27:18  tabin.1      testout      
       User Test.    Date: 06/25/19  22:31:31  tabin.1      testout      
       User Test.    Date: 06/25/19  22:31:34  tabin.1      testout      
       User Test.    Date: 06/25/19  22:31:44  tabin.1      testout      
       User Test.    Date: 06/25/19  22:34:01  tabin.2      testout      
       User Test.    Date: 06/25/19  22:34:03  tabin.3      testout      
       User Test.    Date: 06/25/19  22:34:04  tabin.4      testout      
       User Test.    Date: 06/25/19  22:34:14  tabin.4      testout      
   *** Grading Run.  Date: 06/25/19  22:37:40 
       User Test.    Date: 06/25/19  22:45:37  tabin.4      testout      
       User Test.    Date: 06/25/19  22:45:59  tabin.4      testout      
       User Test.    Date: 06/25/19  22:47:10  tabin.4      testout      
       User Test.    Date: 06/25/19  22:47:11  tabin.4      testout      
       User Test.    Date: 06/25/19  22:48:49  tabin.4      testout      
       User Test.    Date: 06/25/19  22:49:14  tabin.4      testout      
       User Test.    Date: 06/25/19  22:50:09  tabin.4      testout      
       User Test.    Date: 06/25/19  22:52:33  tabin.4      testout      
       User Test.    Date: 06/25/19  22:52:49  tabin.4      testout      
       User Test.    Date: 06/25/19  22:55:23  tabin.4      testout      
       User Test.    Date: 06/25/19  23:26:41  tabin.4      testout      
       User Test.    Date: 06/25/19  23:26:58  tabin.4      testout      
       User Test.    Date: 06/25/19  23:27:17  tabin.4      testout      
       User Test.    Date: 06/25/19  23:27:23  tabin.4      testout      
       User Test.    Date: 06/25/19  23:27:31  tabin.4      testout      
       User Test.    Date: 06/25/19  23:27:49  tabin.4      testout      
       User Test.    Date: 06/25/19  23:28:04  tabin.4      testout      
       User Test.    Date: 06/25/19  23:28:58  tabin.4      testout      
   *** Grading Run.  Date: 06/25/19  23:29:14 
       User Test.    Date: 06/25/19  23:29:48  tabin.4      testout      
   *** Grading Run.  Date: 06/25/19  23:29:52 
   Running test 01   ...  tabs   gradin.1
   Running test 01A  ...  tabs 6 gradin.1
   Running test 01B  ...  tabs 1 gradin.1
   Running test 02   ...  tabs   gradin.2
   Running test 02A  ...  tabs 5 gradin.2
   Running test 02B  ...  tabs 2 gradin.2
   Running test 03   ...  tabs   gradin.3
   Running test 03A  ...  tabs 7 gradin.3
   Running test 03B  ...  tabs 3 gradin.3
   *** Passed all functional tests
++ Grade ++   60 = Points earned for correct answers.

-> We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
 00 -  30 = 20 points 
 31 -  32 = 15 points 
 33 -  34 = 10 points 
 35 -  36 =  5 points 
 37+      =  0 points 
Your actual counts are:
Lines .......  87    Comments ...  45    Labels .......   6   
Directives ..   6    Variables ..   0    Executables ..  30    McCabe ..   8 
++ Grade ++   20 = Points earned for code written efficiency.  

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0015 The program header format is adequate. 
DOCHB-0.60 Use of code block headers is adequate. 
DOCLC-0.90 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    38  = Number of user tests.                                  
     3  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC86&k~C6&juiC86&zuzC766&Zkyz&jgzk@&6<58;57?&&89@8?@;8&

Building the file tabs.ans for electronic submission...

;--------------------------------------------------------------------
;   Program:  Tabs ( MASM version)
;
;   Function: Reads lines from an ASCII input text file which is redirected to the
;             standard input, performs some simple text editing on the lines,
;             and writes the updated lines to an ASCII output text
;             file which is redirected from the standard output. The specific
;             editing function is to expand tabs (replace tabs with  the
;             correct number of spaces) to create columns.
;
;   Owner:    Angela Ho
;
;   Date:     Changes
;   06/18/19  original version
;---------------------------------------
        .model      small              ; 64k code and 64k data
        .8086                          ; only allow 8086 instructions
        .stack      256                ; reserve 256 bytes for the stack
;---------------------------------------

;---------------------------------------
         .data                         ;start the data segment
;---------------------------------------
         .code                         ;start the code segment
;---------------------------------------
tabs:
;---------------------------------------
; test whether the a CLP was typed
;---------------------------------------
        mov         bl,0Ah             ; set the number of space to 10
        cmp         byte ptr es:[80h], 0 ; access the CLP count 80h bytes into the extra segment
        je          while_             ;  no parameter ... continue with the program
        mov         bl, byte ptr es:[82h] ; parameter entered ... load al with the CLP character
        sub         bl, 30h            ; convert the to hex value
set:
        mov        ch,0                ; set the counter to 0
;---------------------------------------
; while (1)
;---------------------------------------
while_:                                ;
;---------------------------------------
; ch = getchar()
;---------------------------------------
         mov        ah,8;              ; set up to read a character without echo
         int        21h                ; read the character
;---------------------------------------
; if (ch == 9 )
;---------------------------------------
         cmp        al, 09h            ; is the char a tab
         mov        cl, al             ; move data in al to t
         jne        put                ; if not tab just output the character
printtab:
         mov        al, 20h            ; move space character to al
         cmp        ch,bl              ; compare counter with user enter value
         jne        put                ; not equal go to put
         jmp        set                ; equal then reset
;---------------------------------------
; putchar(ch)
;---------------------------------------
put:
         mov        ah,2               ; set up to print a character
         mov        dl,al              ;
         int        21h                ; print the character
         add        ch, 1              ; count ++
         cmp        cl, 09h            ; if character is tab
         je         printtab           ;
;---------------------------------------
; if (ch == 10)
;---------------------------------------
         cmp        al, 1Ah            ; if the character is EOF
         je         exit               ; exit the program
         cmp        al, 0Ah            ; If LF then
         je         set                ; reset the counter and read the next char
         cmp        ch,bl              ; compare counter with with user enter value
         je         set                ;
         jmp        while_             ; repeat the loop
;---------------------------------------
; Terminate the Program
;---------------------------------------
exit:
         mov        ax,4c00h           ; set dos code to terminate program
         int        21h                ; return to dos
         end        tabs               ;end marks the end of the source code
                                       ;....and specifies where you want the
                                       ;....program to start execution
;---------------------------------------

