Test date: 07/03/19  11:29:41 
The number of times you used the grading program is 5 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Maze Grading System Version 4.0
Student: Last=Ho                   First=Angela               Type=Individual          
Grading and testing history log
       User Test.    Date: 06/25/19  27:26:45  maze.01      -            
       User Test.    Date: 06/26/19  11:05:27  maze.01      -            
       User Test.    Date: 06/26/19  11:12:56  maze.01      -            
       User Test.    Date: 06/26/19  11:15:39  maze.01      -            
       User Test.    Date: 06/26/19  11:19:47  maze.01      -            
       User Test.    Date: 06/26/19  11:20:09  maze.01      -            
       User Test.    Date: 06/26/19  11:20:37  maze.01      -            
       User Test.    Date: 06/26/19  11:34:46  maze.01      -            
       User Test.    Date: 06/26/19  11:38:12  maze.01      -            
       User Test.    Date: 06/26/19  11:39:17  maze.01      -            
       User Test.    Date: 06/26/19  11:39:23  maze.01      -            
       User Test.    Date: 06/26/19  11:41:32  maze.01      -            
       User Test.    Date: 06/26/19  11:46:53  maze.01      -            
       User Test.    Date: 06/26/19  11:49:41  maze.01      -            
       User Test.    Date: 06/28/19  21:44:04  maze.01      -            
       User Test.    Date: 06/28/19  21:52:06  maze.01      -            
       User Test.    Date: 06/28/19  21:52:16  maze.01      -            
       User Test.    Date: 06/28/19  21:53:51  maze.01      -            
       User Test.    Date: 06/28/19  21:54:40  maze.01      -            
       User Test.    Date: 06/28/19  21:56:43  maze.01      -            
       User Test.    Date: 06/28/19  21:58:02  maze.01      -            
       User Test.    Date: 06/28/19  21:58:36  maze.01      -            
       User Test.    Date: 06/28/19  21:59:04  maze.01      -            
       User Test.    Date: 06/28/19  22:01:31  maze.01      -            
       User Test.    Date: 06/28/19  22:02:20  maze.01      -            
       User Test.    Date: 06/28/19  22:02:31  maze.01      -            
       User Test.    Date: 06/28/19  22:03:12  maze.01      -            
       User Test.    Date: 06/28/19  22:03:43  maze.01      -            
       User Test.    Date: 06/28/19  22:04:48  maze.01      -            
       User Test.    Date: 06/28/19  22:05:26  maze.01      -            
   *** Grading Run.  Date: 06/28/19  22:06:12 
       User Test.    Date: 06/28/19  22:11:32  maze.01      -            
   *** Grading Run.  Date: 06/28/19  22:12:35 
       User Test.    Date: 06/28/19  22:20:00  maze.01      -            
   *** Grading Run.  Date: 06/28/19  22:20:28 
       User Test.    Date: 06/28/19  22:33:21  maze.01      -            
       User Test.    Date: 07/02/19  21:00:36  maze.01      -            
       User Test.    Date: 07/02/19  21:09:12  maze.01      -            
   *** Grading Run.  Date: 07/02/19  21:10:05 
       User Test.    Date: 07/02/19  21:15:38  maze.01      -            
       User Test.    Date: 07/02/19  21:16:21  maze.01      -            
       User Test.    Date: 07/02/19  21:28:07  maze.01      -            
       User Test.    Date: 07/02/19  21:35:00  maze.01      -            
       User Test.    Date: 07/02/19  21:36:04  maze.01      -            
       User Test.    Date: 07/02/19  21:36:36  maze.01      -            
       User Test.    Date: 07/03/19  11:29:04  maze.01      -            
   *** Grading Run.  Date: 07/03/19  11:29:41 
Testing against the nextval specification
Test completed okay
Testing against non symetrical maze
Test completed okay
Testing against a set of random mazes
Test completed okay
Testing for correct operation and efficiency
Building the maze....
Congratulations! Your mouse has traversed the maze.
 
++ Grade ++   50 = Points earned for correct answers.
Your executed instruction count = 000005490

++ Grade ++    5 = Points earned for code executed efficiency.
Target executed: 15 = 0-4999  10 = 5000-5249  5 = 5250-5499  0 = 5500+ 

++ Grade ++   15 = Points for code written. Your count is:  39.
Target written : 15 = 00-40  10 = 41-45  5 = 46-50  0 = 51+

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0021 The program header format is adequate. 
DOCHB-1.10 Use of code block headers is adequate. 
DOCLC-0.87 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++   90 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    42  = Number of user tests.                                  
     5  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC;6&}xC6&k~C;&juiC86&zuzC?6&Zkyz&jgzk@&6=56957?&&77@8?@:7&



Building the file maze.ans for electronic submission...

;--------------------------------------------------------------------
;   Program:  nextval ( MASM version)
;
;   Function: Subroutine that will guide a mouse through a maze.
;             The maze is a 15 row by 30 column array that can be
;             traversed using left or right turning mouse.
;             You may only move one position at a time.
;             You may only move into a location in the maze if the
;             value of that location is blank (20h).
;             You may not move into a location that is blocked
;             (contains any value other than 20h).
;             You may only move left, right, up, down.
;             You may not move diagonally.
;             A position is given as y,x .
;             When your subroutine is called, you make 1 move in the maze
;             and then return.
;   Owner:    Angela Ho
;
;   Date:     Changes
;   06/25/19  original version
;---------------------------------------
        .model      small              ; 64k code and 64k data
        .8086                          ; only allow 8086 instructions
        public      nextval            ; all external program to call
;---------------------------------------

;---------------------------------------
        .data                          ;start the data segment
;---------------------------------------
col     db         30
;---------------------------------------
        .code                          ;start the code segment
;---------------------------------------
nextVal:
         push      bp                  ; save bp on stack
         push      ax                  ; save ax on stack
         push      cx                  ; save bx on stack
;---------------------------------------
; calculate the offset
; offset = (*y-1)*30 + (*x-1);
;---------------------------------------
getValue:
         mov       cl,[si]             ; load bl with the x value
         mov       al,[di]             ; load al with the y value
getOffset:
         dec       cl                  ; subtract 1 from x value
         dec       al                  ; subtract 1 from y value
         mul       [col]               ; multipy y by number of column (30)
         add       al, cl              ; al now contain the offset
         adc       ah, 0               ; add with carry to ensure the value wont overflow
         add       bp, ax              ; increment the pointer with offset to get current locatoion
;---------------------------------------
; get the current direction
; if (*direction == 1) goto testn;
; if (*direction == 2) goto teste;
; if (*direction == 3) goto tests;
; if (*direction == 4) goto testw;
;---------------------------------------
getDirection:
         cmp       byte ptr[bx],3;
         je        south;
         ja        west;
         cmp       byte ptr[bx],1;
         ja        east;
;---------------------------------------
; get the next direction and move
; north :
; if (maze[offset-30] == ' ')
; {
; *y = *y-1;
; *x = *x;
; *direction = 4;
; return; // return
; }
;---------------------------------------
north:
         cmp       byte ptr ds:[bp-30], 20h ; if the north direction is equal to space
         jne       east                ; if it is not a space, try east side
         mov       byte ptr[bx],4      ; change direction to north
         dec       byte ptr[di]        ; subtract y value by one to move the mouse
         jmp exit                      ; return
;---------------------------------------
; get the next direction and move
; east :
; if (maze[offset+1] == ' ')
; {
; *y = *y;
; *x = *x + 1;
; *direction = 1;
; return; // return
; }
;---------------------------------------
east:
         cmp       byte ptr ds:[bp+1],20h   ; if the east direction is equal to space
         jne       south               ; if it is not a space, try south side
         mov       byte ptr[bx],1      ; change direction to east
         add       byte ptr[si],1        ; increase the x value to move the mouse
         jmp       exit                ; return
;---------------------------------------
; get the next direction and move
; south :
; if (maze[offset+30] == ' ')
; {
; *y = *y+1;
; *x = *x;
; *direction = 2;
; return; // return
; }
;---------------------------------------
south:
         cmp       byte ptr ds:[bp+30],20h  ; if the south direction is equal to space
         jne       west                ; if it is not a space, try west side
         mov       byte ptr[bx],2      ; change direction to south
         inc       byte ptr[di]        ; increase y to move the mouse
         jmp       exit                ; return new x and y
;---------------------------------------
; get the next direction and move
; west :
; if (maze[offset-30] == ' ')
; {
; *y = *y;
; *x = *x-1;
; *direction = 3;
; return; // return
; }
;---------------------------------------
west:
         cmp       byte ptr ds:[bp-1],20h  ; if the west direction is equal to space
         jne       north               ; if it is not a space, try north side
         dec       byte ptr[si]        ; decrease x to move the mouse
         mov       byte ptr[bx],3      ; change direction to west
;---------------------------------------
; exit the program
;---------------------------------------
exit:
         pop       cx                  ; restore cx register
         pop       ax                  ; restore ax register
         pop       bp                  ; restore bp register
         ret                           ; return to function
         end
